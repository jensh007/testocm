name: test-ocm-cred
# trigger manually
run-name: Test ocm CLI with credentials
on:
  workflow_dispatch:
# env:
jobs:
  test-ocm:
    runs-on: ubuntu-latest
    steps:
    - name: setup OCM
      uses: open-component-model/ocm-setup-action@main
    - name: create-cert
      run: |
        FDQN_NAME=`hostname --fqdn`
        HNAME=`hostname`
        echo "working dir is: $PWD"
        echo "fqdn hostame is: $FDQN_NAME"
        sudo rm -rf certs
        mkdir -p certs
        openssl req -newkey rsa:4096 -nodes -sha256 -keyout certs/ociregistry.key -addext "subjectAltName = DNS:${FDQN_NAME}" -x509 -days 365 -out certs/ociregistry.crt -subj "/C=DE/ST=Baden-Wuertemberg/L=Walldorf/O=SAP/OU=ocm/CN=${HNAME}"
        openssl x509 -noout -text -in certs/ociregistry.crt
        sudo cp certs/ociregistry.crt /usr/local/share/ca-certificates
        sudo update-ca-certificates
        echo "FDQN_NAME=${FDQN_NAME}" >> $GITHUB_ENV
    - name: create user and credentials
      run: |
        mkdir -p auth
        # generate a random password
        PASSWD=`head /dev/urandom | tr -dc 'A-Za-z0-9!#-$%&=+-' | head -c12`
        htpasswd -Bbn ocmuser ${PASSWD} > auth/htpasswd
        htpasswd -b -v auth/htpasswd ocmuser ${PASSWD}
        echo "PASSWD=${PASSWD}" >> $GITHUB_ENV
    - name: start OCI registry (docker)
      run: |
        docker run -d -p 443:443  --name registry \
          -v ${{ github.workspace}}/certs:/certs \
          -v ${{ github.workspace}}/auth:/auth \
          -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
          -e REGISTRY_AUTH=htpasswd \
          -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
          -e REGISTRY_HTTP_ADDR=:443 \
          -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/ociregistry.crt \
          -e REGISTRY_HTTP_TLS_KEY=/certs/ociregistry.key \
          registry:2.8.1
    - name: Wait for OCI registry to become ready
      timeout-minutes: 1
      run: |
        while ! curl https://${{ env.FDQN_NAME }}/v2
        do
          echo "Waiting for container to become ready... still trying"
          sleep 1
        done
        echo "$Registy container is ready"
    - name: Test OCM 1
      continue-on-error: true
      run: |
        ocm transfer artifacts gcr.io/google-containers/pause:3.2 ${{ env.FDQN_NAME }}/images/pause:3.2
    - name: Test OCM 2
      continue-on-error: true
      run: |
        ocm --cred :type=OCIRegistry --cred ":hostname=${{ env.FDQN_NAME }}" --cred "username=ocmuser" --cred "password=${{ env.PASSWD }}"  transfer artifacts gcr.io/google-containers/pause:3.2 ${{ env.FDQN_NAME }}/images/pause:3.2
    - name: Write ocm credentials file
      run: |
        echo "Home is: ${HOME}"
        cat << EOF >> ${HOME}/.ocmconfig
        type: generic.config.ocm.software/v1
        configurations:
          - type: credentials.config.ocm.software
            consumers:
              - identity:
                  type: OCIRegistry
                  hostname: ${{ env.FDQN_NAME }}
                credentials:
                  - type: Credentials
                    properties:
                      username: ocmuser
                      password: ${{ env.PASSWD }}
        EOF
    - name: Test OCM 3
      continue-on-error: true
      run: |
        echo ".ocmconfig file is:"
        cat ${HOME}/.ocmconfig
        echo "FDQN_NAME is: ${{ env.FDQN_NAME }}"
        ocm transfer artifacts gcr.io/google-containers/pause:3.2 ${{ env.FDQN_NAME }}/images/pause:3.2
    - name: stop docker registry
      if: always()
      run: |
        docker container stop registry
        docker container rm -v registry
